1. Implement a point to point network with four nodes and duplex links between 
them. Analyze the network performance by setting the queue size and varying the 
bandwidth.

set ns [new Simulator] 
set tf [open lab1.tr w] 
$ns trace-all $tf 
set nf [open lab1.nam w] 
$ns namtrace-all $nf 
set n0 [$ns node] 
set n1 [$ns node] 
set n2 [$ns node] 
set n3 [$ns node] 
$ns color 1 "red" 
$ns color 2 "blue" 
$n0 label "Source/udp0" 
$n1 label "Source/udp1" 
$n2 label "Router" 
$n3 label "Destination/Null" 
$ns duplex-link $n0 $n2 10Mb 300ms DropTail 
$ns duplex-link $n1 $n2 10Mb 300ms DropTail 
$ns duplex-link $n2 $n3 1Mb 300ms DropTail  
$ns set queue-limit $n0 $n2 10 
$ns set queue-limit $n1 $n2 10 
$ns set queue-limit $n2 $n3 5  
set udp0 [new Agent/UDP] # A UDP agent; 
$ns attach-agent $n0 $udp0 # on node $n0; 
set cbr0 [new Application/Traffic/CBR] # A CBR traffic generator agent; 
$cbr0 attach-agent $udp0 # attached to the UDP agent; 
set null3 [new Agent/Null] # its sink or destination; 
$ns attach-agent $n3 $null3 # on node $n3; 
set udp1 [newAgent/UDP] 
$ns attach-agent $n1 $udp1 
set cbr1 [new Application/Traffic/CBR] 
$cbr1 attach-agent $udp1  
$ns connect $udp0 $null3 
$ns connect $udp1 $null3
$cbr1 set packetSize_ 500Mb 
$cbr1 set interval_ 0.005 
proc finish { } { 
global ns nf tf 
$ns flush-trace 
exec nam lab1.nam & 
close $tf 
close $nf 
exit 0 
} 
$ns at 0.1 "$cbr0 start" 
$ns at 0.1 "$cbr1 start" 
$ns at 10.0 "finish" 
$ns run
 
AWK file: (Open a new editor using gedit command and write awk file and save with 
“.awk” extension) 
BEGIN{ 
#include<stdio.h> 
count=0; 
} 
{ 
if($1=="d") #d stands for the packets 
count++ 
} 
END{ 
printf("The Total no of Packets Dropped due to Congestion :%d\n\n", count) 
}


2. Implement a four node point to point network with links n0-n2, n1-n2 and n2-n3. 
Apply TCP agent between n0-n3 and UDP between n1-n3. Apply relevant 
applications over TCP and UDP agents changing the parameter and determine the 
number of packets sent by TCP/UDP.

set ns [new Simulator] 
set tracefile [open lab2.tr w] 
$ns trace-all $tracefile 
set namfile [open lab2.nam w] 
$ns namtrace-all $namfile 
set n0 [$ns node] 
set n1 [$ns node] 
set n2 [$ns node] 
set n3 [$ns node] 
$ns duplex-link $n0 $n2 200.0Mb 10ms DropTail 
$ns queue-limit $n0 $n2 50 
$ns duplex-link $n2 $n3 1.0Mb 10ms DropTail 
$ns queue-limit $n2 $n3 20 
$ns duplex-link $n1 $n2 200.0Mb 10ms DropTail 
$ns queue-limit $n1 $n2 50 
set tcp0 [new Agent/TCP] 
$ns attach-agent $n0 $tcp0 
set sink3 [new Agent/TCPSink] 
$ns attach-agent $n3 $sink3 
$ns connect $tcp0 $sink3 
$tcp0 set packetSize_ 1500 
$tcp0 set interval_ 0.1  
set udp1 [new Agent/UDP] 
$ns attach-agent $n1 $udp1 
set null2 [new Agent/Null] 
$ns attach-agent $n3 $null2 
$ns connect $udp1 $null2 
$udp1 set packetSize_ 1500 
$udp1 set interval_ 0.1 
set ftp0 [new Application/FTP] 
$ftp0 attach-agent $tcp0 
$ftp0 set packetSize_ 1000 
$ftp0 set rate_ 1.0Mb 
$ns at 1.0 "$ftp0 start" 
$ns at 9.0 "$ftp0 stop" 
set cbr1 [new Application/Traffic/CBR] 
$cbr1 attach-agent $udp1 
$cbr1 set packetSize_ 1000 
$cbr1 set rate_ 1.0Mb 
$cbr1 set random_null 
$ns at 1.0 "$cbr1 start" 
$ns at 9.0 "$cbr1 stop" 
proc finish {} { 
global ns tracefile namfile 
$ns flush-trace 
close $tracefile 
close $namfile 
exec nam lab2.nam 
& exit 0 
} 
$ns at 0.1 " $ cbr 0 start"
$ns at 0.1 " $ cbr 1 start" 
$ns run

AWK file: 
BEGIN{ 
tcppack=0 
udppack1 
=0 
} 
{
 If($1=="r"&&$4=="2"&&$5=="tcp")
{
tcppack++; 
} 
if($1=="r"&&$4=="2"&&$5=="cbr") 
{ 
udppack1++; 
} 
} 
END{
printf("\n total number of TCP data packets sent between Node 0 and 
Node 2: %d\n", tcppack++); 
printf("\n total number of UDP data packets sent between Node 1 and 
Node 2: %d\n", udppack1++); 
}


3. Implement Ethernet LAN using n (6-10) nodes. Compare the throughput 
by changing the error rate and data rate.

Program: 
set ns [new Simulator] 
set tf [open lab3.tr w] 
$ns trace-all $tf 
set nf [open lab3.nam w] 
$ns namtrace-all $nf 
$ns color 0 blue 
set n0 [$ns node] 
$n0 color "red" 
set n1 [$ns node] 
$n1 color "red" 
set n2 [$ns node] 
$n2 color "red" set 
udp 1
n 0 n 1
n 2 n 3
Lan1
Lan2
n 5 n 6 n 7 n 4
null
Cbr1 
n3 [$ns node] 
$n3 color "red" set 
n4 [$ns node] 
$n4 color “magenta" 
set n5 [$ns node] 
$n5 color"magenta" 
set n6 [$ns node] 
$n6 color "magenta" 
set n7 [$ns node] 
$n7 color "magenta" 
$n1 label "Source/UDP" 
$n3 label "ErrorNode" 
$n7 label “Destination" 
$ns make-lan "$n0 $n1 $n2 $n3" 100Mb 300ms LL Queue/DropTail Mac/802_3 
$ns make-lan "$n4 $n5 $n6 $n7" 100Mb 300ms LL Queue/DropTail Mac/802_3 
$ns duplex-link $n3 $n4 100Mb 300ms DropTail 
$ns duplex-link-op $n3 $n4 color "green" 
set err [new ErrorModel] 
$ns lossmodel $err $n3 $n4 
$err set rate_ 0.1 
set udp [new Agent/UDP] 
$ns attach-agent $n1$udp 
set cbr [new Application/Traffic/CBR] 
$cbr attach-agent $udp 
$cbr set fid_ 0 
$cbr set packetSize_ 1000 
$cbr set interval_ 0.001 
set null [new Agent/Null] 
$ns attach-agent $n7 $null 
$ns connect $udp $null 
proc finish { } { 
global ns nf tf 
$ns flush-trace 
close $nf 
close $tf 
exec nam lab3.nam & 
exit 0 
} 
$ns at 0.1 "$cbr start" 
$ns at 3.0 "finish" 
$ns run

AWK File:
BEGIN{
count=0;
sent=0;
throughput=0;
}
if($1== “r” && $4== “7” && $5== “cbr”)
{
if($3== “1”)
{
sent++
}
throughput=(count/sent)*100;
}
end{
printf("the total no of packets received:%d\n.total no of packets sent from node 1:%d\n throughput percentage is: % f\n", count, sent, throughput) 
}


5. Implement ESS with transmission nodes in Wireless LAN and obtain the 
performance parameters.

Program 
set ns [new Simulator] 
set tf [open lab5.tr w] 
$ns trace-all $tf 
set topo [new Topography] 
$topo load_flatgrid 1000 1000 
set nf [open lab5.nam w] 
$ns namtrace-all-wireless $nf 1000 1000 
$ns node-config -adhocRouting DSDV\ 
-llType LL \ 
-macType Mac/802_11 \ 
-ifqType Queue/DropTail \ 
-ifqLen 50 \ 
-phyType Phy/WirelessPhy \ 
-channelType Channel/WirelessChannel \ 
-propType Propagation/TwoRayGround \ 
-antType Antenna/OmniAntenna \ 
-topoInstance $topo \ 
-agentTrace ON \ 
-routerTraceOFF 
create-god 3 
set n0 [$ns node] 
set n1 [$ns node] 
set n2 [$ns node] 
$n0 label "tcp0" 
$n1 label "sink1/tcp1" 
$n2 label "sink2" 
$n0 set X_50 
$n0 set Y_50 
$n0 set Z_ 0 
$n1 set X_100 
$n1 set Y_100 
$n1 set Z_ 0 
$n2 set X_600 
$n2 set Y_600 
$n2 set Z_ 0 
$ns at 0.1 "$n0 setdest 50 50 15" 
$ns at 0.1 "$n1 setdest 100 100 25" 
$ns at 0.1 "$n2 setdest 600 600 25" 
set tcp0 [new Agent/TCP] 
$ns attach-agent $n0 $tcp0 
set ftp0 [new Application/FTP] 
$ftp0 attach-agent $tcp0 
set sink1 [new Agent/TCPSink] 
$ns attach-agent $n1 $sink1 
$ns connect $tcp0 $sink1 
set tcp1 [new Agent/TCP] 
$ns attach-agent $n1 $tcp1 
set ftp1 [new Application/FTP] 
$ftp1 attach-agent $tcp1 
set sink2 [new Agent/TCPSink] 
$ns attach-agent $n2 $sink2 
$ns connect $tcp1 $sink2 
$ns at 5 "$ftp0 start" 
$ns at 5 "$ftp1 start" 
$ns at 100 "$n1 setdest 550 550 15" 
$ns at 190 "$n1 setdest 70 70 15" 
proc finish { } { 
global ns nf tf 
$ns flush-trace 
exec nam lab5.nam & 
close $tf 
exit 0 
} 
$ns at 250 "finish" 
$ns run 

AWK FILE: 
BEGIN{ 
tcppack= 
0 
tcppack1 
=0 
} 
{ 
if($1=="s"&&$3=="_0_"&&$4=="AGT") 
{ 
tcppack++; 
} 
if($1=="r"&&$3=="_2_"&&$4=="AGT") 
{ 
tcppack1++; 
} 
} 
END{ 
printf("\n total number of data packets at Node 0: %d\n", 
tcppack++); printf("\n total number of data packets at Node 
2: %d\n", tcppack1++); 
}


6. Implementation of Link state routing algorithm.

Program:  
set ns [new Simulator] 
set tracefile [open lab6.tr w] 
$ns trace-all $tracefile 
set namfile [open lab6.nam w] 
$ns namtrace-all $namfile 
set n0 [$ns node] 
set n1 [$ns node] 
set n2 [$ns node] 
set n3 [$ns node] 
set n4 [$ns node] 
$ns duplex-link $n0 $n1 100.0Mb 10ms DropTail 
$ns queue-limit $n0 $n1 50 
$ns duplex-link $n0 $n2 100.0Mb 10ms DropTail 
$ns queue-limit $n0 $n2 50 
$ns duplex-link $n2 $n3 100.0Mb 10ms DropTail 
$ns queue-limit $n2 $n3 50 
$ns duplex-link $n1 $n3 100.0Mb 10ms DropTail 
$ns queue-limit $n1 $n3 50 
$ns duplex-link $n3 $n4 100.0Mb 10ms DropTail 
$ns queue-limit $n3 $n4 50 
$ns duplex-link $n0 $n3 100.0Mb 10ms DropTail 
$ns queue-limit $n0 $n3 50 
$ns duplex-link $n1 $n2 100.0Mb 10ms DropTail 
$ns queue-limit $n1 $n2 50 
$ns duplex-link-op $n0 $n1 orient right 
$ns duplex-link-op $n0 $n2 orient right-down 
$ns duplex-link-op $n2 $n3 orient right 
$ns duplex-link-op $n1 $n3 orient left-down 
$ns duplex-link-op $n3 $n4 orient left-down 
$ns duplex-link-op $n0 $n3 orient right-down 
$ns duplex-link-op $n1 $n2 orient left-down 
$ns cost $n0 $n12 
$ns cost $n0 $n21 
$ns cost $n0 $n33 
$ns cost $n1 $n02 
$ns cost $n1 $n22 
$ns cost $n1 $n33 
$ns cost $n2 $n12 
$ns cost $n2 $n01 
$ns cost $n2 $n31 
$ns cost $n3 $n21 
$ns cost $n3 $n13 
$ns cost $n3 $n03 
$ns cost $n3 $n42 
$ns cost $n4 $n32 
set udp0 [new Agent/UDP] 
$ns attach-agent $n0 $udp0 
set null1 [new Agent/Null] 
$ns attach-agent $n4 $null1 
$ns connect $udp0 $null1 
$udp0 set packetSize_ 1500 
set cbr0 [new Application/Traffic/CBR] 
$cbr0 attach-agent $udp0 
$cbr0 set packetSize_ 1000 
$cbr0 set rate_ 1.0Mb 
$cbr0 set random_null 
$ns at 1.0 "$cbr0 start" 
$ns at 5.0 "$cbr0 stop" 
$ns rtproto LS 
#Define a 'finish' procedure 
proc finish { } { 
global ns tracefile namfile 
$ns flush-trace 
close $tracefile 
close $namfile 
exec nam lab6.nam & 
exit 0 
}  
$ns at 10.0 "finish"
$ns run 


Part B (Programs in C) 
1. Write a program for a HDLC frame to perform the following.
a) Bit stuffing

#include<string.h> 
#include<stdio.h> 
main() 
{ 
char a[20],fs[50]="",t[6],r[5]; 
int i,j,p=0,q=0; 
printf("enter bit string : "); 
scanf("%s",a); 
strcat(fs,"01111110"); 
if(strlen(a)<5) 
{ 
strcat(fs,a); 
} 
else 
{ 
for(i=0;i<strlen(a)-4;i++) 
{ 
for(j=i;j<i+5;j++) 
{ 
t[p++]=a[j]; 
} 
t[p]='\0'; 
if(strcmp(t,"11111")==0)
{ 
strcat(fs,"111110"); 
i=j-1; 
} 
else 
{ 
r[0]=a[i]; 
r[1]='\0'; 
strcat(fs,r); 
} 
p=0; 
} 
for(q=i;q<strlen(a);q++) 
{ 
t[p++]=a[q]; 
} 
t[p]='\0';
strcat(fs,t); 
} 
strcat(fs,"01111110"); 
printf("After stuffing : %s",fs); 
getch();

b) Character stuffing using HDLC frame format 
#include<string.h> 
#include<stdio.h> 
main() 
{ 
char a[30],fs[50000]="",t[3],sd, ed, x[3],s[3],d[3],y[3]; 
int i,j,p=0,q=0; 
printf("Enter characters to be stuffed : "); 
scanf("%s",a); 
printf("\nEnter a character that represents starting delimiter :"); 
scanf("%c",&sd); 
printf("\n Enter a character that represent sending delimiter : "); 
scanf("%c",&ed); 
x[0]=s[0]=s[1]=sd; 
x[1]=s[2]='\0'; 
y[0]=d[0]=d[1]=ed; 
d[2]=y[1]='\0'; 
strcat(fs,x); 
for(i=0;i<strlen(a);i++) 
{ 
t[0]=a[i]; 
t[1]='\0'; 
if(t[0]==sd) 
strcat(fs,s); 
else 
if(t[0]==ed) 
strcat(fs,d); 
else 
strcat(fs,t); 
} 
strcat(fs,y); 
printf("\nAfter stuffing : %s",fs); 
getch(); 
}

2. Write a program for distance vector algorithm to find suitable path for 
transmission.


#include <stdio.h> 
#include <stdlib.h> 
int d[10][10], via[10][10]; 
int main() 
{ 
int i,j, k, n, g[10][10]; 
printf("\nEnter the no of nodes : 
"); scanf("%d", &n); 
for(i = 0; i<n;i++) 
{ 
printf("Enter the record for route %c \n", 
i+97); for(j = 0;j<n;j++) 
{ 
printf("(%c : %c) :: ", i+97, j+97); 
scanf("%d", &g[i][j]); 
if(g[i][j] != 999) 
d[i][j] = 1; 
} 
} 
for(i = 0; i<n; i++) 
for(j = 0;j<n;j++) 
via[i][j] = i; 
for(i = 0; i<n;i++) 
{ 
for(j = 0; j<n;j++) 
if(d[i][j] == 1) 
for(k = 0; k<n; k++) 
if(g[i][j] + g[j][k] < g[i][k]) 
{ 
g[i][k] = g[i][j] +g[j][k]; 
via[i][k] = j; 
} 
} 
for(i = 0; i<n;i++) 
{ 
printf("cost of route %c :\n",i+97); 
for(j = 0; j<n;j++) 
printf("%c : %d via %c \n", j+97, g[i][j], via[i][j]+ 97); 
} 
return 0; 
}

4a:Implementation of Stop and wait Protocol

#include<stdio.h> 
#include<conio.h> 
#include<stdlib.h> 
void main() 
{ 
int i,j,noframes,x,x2; 
noframes=10; 
i=1; 
j=1; 
printf("number of frames is %d ",noframes); 
getch(); 
while(noframes>0) 
{ 
printf("\nsending frames is %d",i); 
x=rand()%15; 
if(x%5==0) 
{ 
for(x2=1;x2<2;x2++) 
{ 
printf("\n waiting for %d 
seconds\n",x2); sleep(x2); 
} 
printf("\n sending frames %d\n",i); 
x=rand()%10; 
} 
i++; j++; 
printf("\n ack for frame %d\n",j); 
noframes=noframes-1; 
}
printf("\n end of stop and wait protocol\n"); 
}


4b: Implementation of Sliding Window Protocol 
Program: 
#include<stdio.h> 
int main() 
{ 
int w,i,f,frames[50]; 
printf("Enter window size: "); 
scanf("%d",&w); 
printf("\nEnter number of frames to transmit: "); 
scanf("%d",&f); 
printf("\nEnter %d frames: ",f); 
for(i=1;i<=f;i++) 
scanf("%d",&frames[i]); 
printf("\n With sliding window protocol the frames will be sent in the following 
manner (assuming no corruption of frames)\n\n"); 
printf("After sending %d frames at each stage sender waits for 
acknowledgement sent by the receiver\n\n",w); 
for(i=1;i<=f;i++) 
{ 
if(i%w==0) 
{ 
printf("%d\n",frames[i]); 
printf("Acknowledgement of over frames sent is received by sender\n\n"); 
} 
else 
printf("%d ",frames[i]); 
} 
if(f%w!=0) 
printf("\nAcknowledgement of above frames sent is received by 
sender\n"); 
return0; 
}

5. Write a program for congestion control using leaky bucket algorithm.
#include<stdio.h> 
#include<stdlib.h> 
#define MIN(x,y) (x>y)?y:x int 
main() 
{ 
int orate,drop=0,cap,x,count=0,inp[10]={0},i=0,nsec,ch;
printf("\n enter bucket size : "); 
scanf("%d",&cap); 
printf("\n enter output rate :"); 
scanf("%d",&orate); 
do 
{ 
printf("\n enter number of packets coming at second %d :",i+1); 
scanf("%d",&inp[i]); 
i++; 
printf("\n enter 1 to contiue or 0toquit ......... "); 
scanf("%d",&ch); 
} 
while(ch); 
nsec=i; 
printf("\n second \t recieved \t sent \t dropped \t remained \n"); 
for(i=0;count || i<nsec;i++) 
{ 
printf(" %d",i+1); 
printf(" \t%d\t ",inp[i]); 
printf(" \t %d\t ",MIN((inp[i]+count),orate)); 
if((x=inp[i]+count-orate)>0) 
{ 
if(x>cap) 
{ 
count=cap; 
drop=x-cap;
} 
else 
{ 
count=x; 
drop=0; 
} 
} 
else 
{ 
drop=0; 
count=0;
} 
printf("\t%d\t %d\n",drop,count); 
} 
return 0; 
}




